<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<!-- Method Documentation URL: https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html#index-routing -->
<template name="routeDocument" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="indexName"
               description="Name of the index inside which the type would be created."/>
    <parameter name="type" description="The type inside which the ID would be considered."/>
    <parameter name="user" description="Name of the user performing the operation."/>
    <parameter name="postDate"
               description="Date when the index should be inserted. Will be defaulted to the processing date if not explicitly specified."/>
    <parameter name="message" description="Message associated with the insertion operation."/>
    <parameter name="routingName"
               description="Name of the shard base to which the document would be routed."/>
    <parameter name="timeStamp"
               description="A document can be indexed with a timestamp associated with it. If the timestamp value is not provided externally or in the _source, the timestamp will be automatically set to the date the document was processed by the indexing chain."/>
    <parameter name="timeToLive"
               description="A document can be indexed with a ttl (time to live) associated with it. Expired documents will be expunged automatically. The expiration date that will be set for a document with a provided ttl is relative to the timestamp of the document, meaning it can be based on the time of indexing or on any time provided."/>
    <parameter name="timeout"
               description="The primary shard assigned to perform the index operation might not be available when the index operation is executed."/>
    <parameter name="refresh"
               description="To refresh the shard (not the whole index) immediately after the operation occurs, so that the document appears in search results immediately, the refresh parameter can be set to true."/>
    <parameter name="consistency"
               description="Control if the operation will be allowed to execute based on the number of active shards within that partition (replication group). The values allowed are one, quorum, and all. The parameter to set it is consistency, and it defaults to the node level setting of action.write_consistency which in turn defaults to quorum."/>
    <sequence>
        <property name="uri.var.indexName" expression="$func:indexName"/>
        <property name="uri.var.type" expression="$func:type"/>
        <property name="uri.var.user" expression="$func:user"/>
        <property name="uri.var.postDate" expression="$func:postDate"/>
        <property name="uri.var.message" expression="$func:message"/>
        <property name="uri.var.routingName" expression="$func:routingName"/>
        <property name="uri.var.timeStamp" expression="$func:timeStamp"/>
        <property name="uri.var.timeToLive" expression="$func:timeToLive"/>
        <property name="uri.var.timeout" expression="$func:timeout"/>
        <property name="uri.var.refresh" expression="$func:refresh"/>
        <property name="uri.var.consistency" expression="$func:consistency"/>
        <script language="js">
            <![CDATA[
            var timeStamp = mc.getProperty('uri.var.timeStamp');
            var timeToLive = mc.getProperty('uri.var.timeToLive');
            var refresh = mc.getProperty('uri.var.refresh');
            var timeout = mc.getProperty('uri.var.timeout');
            var consistency = mc.getProperty('uri.var.consistency');
            var routingName = mc.getProperty('uri.var.routingName');
            var postDate = mc.getProperty('uri.var.postDate');
            var message = mc.getProperty('uri.var.message');
            var user = mc.getProperty('uri.var.user');
            var jsonPayload = {};
            var commonQueryParams = mc.getProperty('uri.var.commonQueryParams');
            var urlQuery = '';
            if (commonQueryParams != null && commonQueryParams != "") {
               urlQuery +=  commonQueryParams;
            }
            if (routingName != null && routingName != "") {
               urlQuery += 'routing=' + routingName + '&';
            }
            if (timeStamp != null && timeStamp != ""){
               jsonPayload.timestamp = timeStamp;
            }
            if (timeToLive != null && timeToLive != ""){
               jsonPayload._ttl = timeToLive;
            }
            if (timeout != null && timeout != ""){
               jsonPayload.timeout = timeout;
            }
            if (refresh != null && refresh != ""){
               jsonPayload.refresh = refresh;
            }
            if (consistency != null && consistency != "") {
               urlQuery += 'consistency=' + consistency + '&';
            }
            // Add a leading '?' and remove the trailing '&'
            if (urlQuery != "") {
               urlQuery = '?' + urlQuery.toString().substring(0, urlQuery.toString().lastIndexOf("&"));
               mc.setProperty('uri.var.urlQuery', urlQuery);
            }
            if (user != null && user != ""){
               jsonPayload.user = user;
            }
            if (postDate != null && postDate != ""){
               jsonPayload.post_date = postDate;
            }
            if (message != null && message != ""){
               jsonPayload.message = message;
            }
            mc.setPayloadJSON(jsonPayload);
         ]]>
        </script>
        <call>
            <endpoint>
                <http method="post"
                      uri-template="{uri.var.apiUrl}/{uri.var.indexName}/{uri.var.type}{+uri.var.urlQuery}"/>
            </endpoint>
        </call>
    </sequence>
</template>

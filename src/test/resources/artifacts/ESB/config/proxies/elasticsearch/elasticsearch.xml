<?xml version="1.0" encoding="UTF-8"?>
<proxy xmlns="http://ws.apache.org/ns/synapse" name="elasticsearch" transports="https,http"
       statistics="disable" trace="disable" startOnLoad="true">
    <target>
        <inSequence>
            <property name="apiUrl" expression="json-eval($.apiUrl)"/>
            <property name="indexName" expression="json-eval($.indexName)"/>
            <property name="type" expression="json-eval($.type)"/>
            <property name="terminateAfter" expression="json-eval($.terminateAfter)"/>
            <property name="from" expression="json-eval($.from)"/>
            <property name="size" expression="json-eval($.size)"/>
            <property name="version" expression="json-eval($.version)"/>
            <property name="scroll" expression="json-eval($.scroll)"/>
            <property name="pretty" expression="json-eval($.pretty)"/>
            <property name="human" expression="json-eval($.human)"/>
            <property name="id" expression="json-eval($.id)"/>
            <property name="refresh" expression="json-eval($.refresh)"/>
            <property name="timeout" expression="json-eval($.timeout)"/>
            <property name="script" expression="json-eval($.script)"/>
            <property name="message" expression="json-eval($.message)"/>
            <property name="routingName" expression="json-eval($.routingName)"/>
            <property name="consistency" expression="json-eval($.consistency)"/>
            <property name="user" expression="json-eval($.user)"/>
            <property name="postDate" expression="json-eval($.postDate)"/>
            <property name="format" expression="json-eval($.format)"/>
            <property name="filterPath" expression="json-eval($.filterPath)"/>
            <property name="flatSettings" expression="json-eval($.flatSettings)"/>
            <property name="callback" expression="json-eval($.callback)"/>
            <property name="case" expression="json-eval($.case)"/>
            <property name="versionType" expression="json-eval($.versionType)"/>
            <property name="operationType" expression="json-eval($.operationType)"/>
            <property name="timeStamp" expression="json-eval($.timeStamp)"/>
            <property name="timeToLive" expression="json-eval($.timeToLive)"/>
            <property name="source" expression="json-eval($.source)"/>
            <property name="sourceExclude" expression="json-eval($.sourceExclude)"/>
            <property name="sourceInclude" expression="json-eval($.sourceInclude)"/>
            <property name="fields" expression="json-eval($.fields)"/>
            <property name="routing" expression="json-eval($.routing)"/>
            <property name="preference" expression="json-eval($.preference)"/>
            <property name="realtime" expression="json-eval($.realtime)"/>
            <property name="docs" expression="json-eval($.docs)"/>
            <property name="settings" expression="json-eval($.settings)"/>
            <property name="parentId" expression="json-eval($.parentId)"/>
            <property name="childId" expression="json-eval($.childId)"/>
            <property name="tagValue" expression="json-eval($.tagValue)"/>
            <property name="parentType" expression="json-eval($.parentType)"/>

            <filter xpath="(get-property('transport','Action')='urn:performBulkOperations') or (get-property('transport','Action')='urn:multiSearch')">
                <then>
                    <elasticsearch.init>
                        <apiUrl>{$url:apiUrl}</apiUrl>
                    </elasticsearch.init>
                </then>
                <else>
                    <elasticsearch.init>
                        <apiUrl>{$ctx:apiUrl}</apiUrl>
                    </elasticsearch.init>
                </else>
            </filter>

            <switch source="get-property('transport', 'Action')">
                <case regex="urn:searchByQuery">
                    <elasticsearch.searchByQuery>
                        <from>{$ctx:from}</from>
                        <size>{$ctx:size}</size>
                        <version>{$ctx:version}</version>
                        <scroll>{$ctx:scroll}</scroll>
                        <terminateAfter>{$ctx:terminateAfter}</terminateAfter>
                    </elasticsearch.searchByQuery>
                </case>
                <case regex="urn:searchDocumentByIndex">
                    <elasticsearch.searchDocumentsByIndex>
                        <indexName>{$ctx:indexName}</indexName>
                        <from>{$ctx:from}</from>
                        <size>{$ctx:size}</size>
                        <version>{$ctx:version}</version>
                        <scroll>{$ctx:scroll}</scroll>
                        <terminateAfter>{$ctx:terminateAfter}</terminateAfter>
                    </elasticsearch.searchDocumentsByIndex>
                </case>
                <case regex="urn:searchDocumentByTypes">
                    <elasticsearch.searchDocumentByTypes>
                        <indexName>{$ctx:indexName}</indexName>
                        <from>{$ctx:from}</from>
                        <size>{$ctx:size}</size>
                        <version>{$ctx:version}</version>
                        <scroll>{$ctx:scroll}</scroll>
                        <terminateAfter>{$ctx:terminateAfter}</terminateAfter>
                        <type>{$ctx:type}</type>
                    </elasticsearch.searchDocumentByTypes>
                </case>
                <case regex="urn:deleteDocument">
                    <elasticsearch.deleteDocument>
                        <indexName>{$ctx:indexName}</indexName>
                        <type>{$ctx:type}</type>
                        <id>{$ctx:id}</id>
                        <refresh>{$ctx:refresh}</refresh>
                        <timeout>{$ctx:timeout}</timeout>
                        <consistency>{$ctx:consistency}</consistency>
                    </elasticsearch.deleteDocument>
                </case>
                <case regex="urn:updateDocument">
                    <elasticsearch.updateDocument>
                        <indexName>{$ctx:indexName}</indexName>
                        <type>{$ctx:type}</type>
                        <id>{$ctx:id}</id>
                        <script>{$ctx:script}</script>
                        <refresh>{$ctx:refresh}</refresh>
                        <timeout>{$ctx:timeout}</timeout>
                        <consistency>{$ctx:consistency}</consistency>
                    </elasticsearch.updateDocument>
                </case>
                <case regex="urn:routeDocument">
                    <elasticsearch.routeDocument>
                        <indexName>{$ctx:indexName}</indexName>
                        <type>{$ctx:type}</type>
                        <routingName>{$ctx:routingName}</routingName>
                        <message>{$ctx:message}</message>
                        <timeout>{$ctx:timeout}</timeout>
                        <refresh>{$ctx:refresh}</refresh>
                        <consistency>{$ctx:consistency}</consistency>
                        <user>{$ctx:user}</user>
                        <postDate>{$ctx:postDate}</postDate>
                    </elasticsearch.routeDocument>
                </case>
                <case regex="urn:createAutomaticId">
                    <elasticsearch.createAutomaticId>
                        <indexName>{$ctx:indexName}</indexName>
                        <type>{$ctx:type}</type>
                        <user>{$ctx:user}</user>
                        <postDate>{$ctx:postDate}</postDate>
                        <message>{$ctx:message}</message>
                        <timeout>{$ctx:timeout}</timeout>
                        <refresh>{$ctx:refresh}</refresh>
                    </elasticsearch.createAutomaticId>
                </case>
                <case regex="urn:createDocumentWithIndex">
                    <elasticsearch.createDocumentWithIndex>
                        <indexName>{$ctx:indexName}</indexName>
                        <type>{$ctx:type}</type>
                        <id>{$ctx:id}</id>
                        <user>{$ctx:user}</user>
                        <postDate>{$ctx:postDate}</postDate>
                        <message>{$ctx:message}</message>
                        <version>{$ctx:version}</version>
                        <versionType>{$ctx:versionType}</versionType>
                        <operationType>{$ctx:operationType}</operationType>
                        <timeStamp>{$ctx:timeStamp}</timeStamp>
                        <timeToLive>{$ctx:timeToLive}</timeToLive>
                        <timeout>{$ctx:timeout}</timeout>
                        <refresh>{$ctx:refresh}</refresh>
                        <consistency>{$ctx:consistency}</consistency>
                    </elasticsearch.createDocumentWithIndex>
                </case>
                <case regex="urn:getDocument">
                    <elasticsearch.getDocument>
                        <indexName>{$ctx:indexName}</indexName>
                        <type>{$ctx:type}</type>
                        <id>{$ctx:id}</id>
                        <source>{$ctx:source}</source>
                        <sourceExclude>{$ctx:sourceExclude}</sourceExclude>
                        <sourceInclude>{$ctx:sourceInclude}</sourceInclude>
                        <fields>{$ctx:fields}</fields>
                        <routing>{$ctx:routing}</routing>
                        <preference>{$ctx:preference}</preference>
                        <refresh>{$ctx:refresh}</refresh>
                        <realtime>{$ctx:realtime}</realtime>
                        <version>{$ctx:version}</version>
                    </elasticsearch.getDocument>
                </case>
                <case regex="urn:performBulkOperations">
                    <elasticsearch.performBulkOperations>
                    </elasticsearch.performBulkOperations>
                </case>
                <case regex="urn:multiSearch">
                    <elasticsearch.multiSearch>
                    </elasticsearch.multiSearch>
                </case>
                <case regex="urn:listDocuments">
                    <elasticsearch.listDocuments>
                        <indexName>{$ctx:indexName}</indexName>
                        <routing>{$ctx:routing}</routing>
                        <refresh>{$ctx:refresh}</refresh>
                        <realtime>{$ctx:realtime}</realtime>
                        <fields>{$ctx:fields}</fields>
                        <source>{$ctx:source}</source>
                        <docs>{$ctx:docs}</docs>
                        <ids>{$ctx:ids}</ids>
                        <type>{$ctx:type}</type>
                        <sourceExclude>{$ctx:sourceExclude}</sourceExclude>
                        <sourceInclude>{$ctx:sourceInclude}</sourceInclude>
                    </elasticsearch.listDocuments>
                </case>
                <case regex="urn:createAutomaticIndex">
                    <elasticsearch.createAutomaticIndex>
                        <settings>{$ctx:settings}</settings>
                        <indexName>{$ctx:indexName}</indexName>
                    </elasticsearch.createAutomaticIndex>
                </case>
                <case regex="urn:indexChildDocument">
                    <elasticsearch.indexChildDocument>
                        <parentId>{$ctx:parentId}</parentId>
                        <childId>{$ctx:childId}</childId>
                        <indexName>{$ctx:indexName}</indexName>
                        <tagValue>{$ctx:tagValue}</tagValue>
                        <type>{$ctx:type}</type>
                        <parentType>{$ctx:parentType}</parentType>
                    </elasticsearch.indexChildDocument>
                </case>
            </switch>
            <respond/>
        </inSequence>
        <outSequence>
            <log/>
            <send/>
        </outSequence>
    </target>
    <description/>
</proxy>
                                